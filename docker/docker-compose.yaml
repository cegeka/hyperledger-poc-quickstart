version: '3'

networks:
  # Network name generated by the fabric docker-compose = composer_default (parent comoposer folder=composer, network name = default)
  # Not the best way to connect the fabric network to this one, but editing the fabric composer to use explicit network names will cause the 
  # chaincode containers to start on the default network, which will prohibit them from contacting the peer server
  composer_default:
    external: true

services:
  frontend:
    build:
      context: ../client
      args:
        - FRONTEND_ENV=--env=prod
        # variables in environment.prod.ts that point to the public-facing APIs where the website & monitor website will be hosted
        - PUBLIC_URL=http://localhost:8080
        - MONITOR_PUBLIC_URL=http://localhost:8081
    links:
      - backend
    ports:
      # main frontend port = 80
      - 8080:80
    environment:
      # Used by the nginx forward rules for the /api paths
      SERVER_HOST: backend
      SERVER_PORT: 3000
    container_name: hyper-frontend
    networks:
      - composer_default

  backend:
    build:
      context:  ../server
    ports:
      # debugging purpose only
      - 3000:3000
    environment:
      NODE_ENV: production
      PORT: 3000
    container_name: hyper-backend
    volumes:
      - .data/composer:/root/.composer
    networks:
      - composer_default

  explorer-db:
    image: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: example
      MYSQL_DATABASE: fabricexplorer
    container_name: hyper-db-explorer
    volumes:
      - .data/mysql:/var/lib/mysql
    networks:
      - composer_default

  explorer:
    build:
      context: ./explorer
    environment:
      DB_USER: root      
      DB_PASSWORD: example
      DB_HOST: explorer-db
    depends_on:
      - explorer-db
    links: 
      - explorer-db
    ports:
      # Debug purpose only
      - 8081:8080
    container_name: hyper-explorer
    networks:
      - composer_default    
