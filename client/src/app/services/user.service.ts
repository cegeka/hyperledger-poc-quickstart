import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map'
import { Injectable } from '@angular/core';
import { BaseResourceService, HTTP_VERB } from './base-resource.service';

@Injectable()
export class UserService extends BaseResourceService {
  public loggedInUser: any;
  public loggedInUserName: string;
  public loggedInRole: UserRole;

  public cleanup() {
    this.loggedInUser = null;
    this.loggedInRole = null;
    this.loggedInUserName = null;
  }

  public loginWithRole(userName: string, userRole: UserRole): Observable<UserRole> {
    // clean up state
    this.cleanup();

    if (!userName) {
      return new Observable<UserRole>(observer => observer.error('Missing user name'));
    }
    if (!userRole) {
      return new Observable<UserRole>(observer => observer.error('User role cannot be determined'));
    }

    return this.jsonRequest(`${userRole.toString()}/${userName}`, HTTP_VERB.GET)
      .map((res) => {
        this.loggedInUser = res;
        this.loggedInUserName = userName;
        this.loggedInRole = userRole;
        return userRole;
      });
  }

  public login(userName: string): Observable<UserRole> {
    const userRole = this.getUserRole(userName);

    return this.loginWithRole(userName, userRole);
  }

  private getUserRole(userName): UserRole {
    if (!userName) {
      return null;
    }
    // TODO: figure out on which user class to check, based on user name

    if (userName.indexOf('customer') !== -1) {
      return UserRole.Customer;
    }

    return UserRole.Admin;
  }
}

//
//  Enum with the types of user classes supported by the application.
//  The string value maps to the URL generated by the composer rest API tool
export enum UserRole {
  Admin = 'Admin',
  Customer = 'Customer'
};
